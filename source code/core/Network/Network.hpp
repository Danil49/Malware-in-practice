#pragma once

#include <vector>
#include <string>
#include <fstream>

#include "Zip.hpp"

namespace Network
{

    static std::vector<uint8_t> EncodeToBytes(std::string data)
    {
        std::vector<unsigned char> tmp(data.begin(), data.end());
        return ProtocolZip::Compress(tmp);
    }

    static std::vector<uint8_t> BufferAsBytes(const char* charPtr, size_t length) 
    {
        std::vector<uint8_t> result(length);
        for (size_t i = 0; i < length; ++i) {
            result[i] = static_cast<uint8_t>(charPtr[i]);
        }
        return result;
    }

    static std::string DecodeFromBytes(std::vector<uint8_t> data)
    {
        std::vector<unsigned char> tmp = ProtocolZip::Decompress(data);
        return std::string(tmp.begin(), tmp.end());
    }

    static bool SaveBytesToFile(const std::string& fileName, std::vector<uint8_t>& byteVector) 
    {
        std::fstream fs(fileName, std::ios::binary | std::ios::trunc);
        if (fs.is_open()) {
            fs.write(reinterpret_cast<const char*>(byteVector.data()), byteVector.size());
            fs.close();
            return true;
        }
        else {
            return false;
        }
    }


}
