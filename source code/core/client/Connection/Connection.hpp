#pragma once


#include <WinSock2.h>
#include <WS2tcpip.h>
#include <string>
#include <vector>
#include <iostream>
#include <openssl/ssl.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <memory>
#include <algorithm>
#include <iterator>
#include <fstream>
#include <atomic>
#include <queue>
#include <mutex>

#include "Network.hpp"
#include "../Settings.hpp"
#include "../Helper/Helper.hpp"
#include "../DebugOutput.h"

#pragma comment(lib, "wbemuuid.lib")
#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "libssl.lib")
#pragma comment(lib, "libcrypto.lib")

namespace Connection
{
    class ClientSocket {
    private:
        static std::vector<uint8_t> Buffer;      // Socket buffer
        static std::mutex SendSync; // Sync send

        static int VerifyCertificate(int preverify_ok, X509_STORE_CTX* x509_ctx);
        static size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output);
        static bool SocketConnected(SOCKET socket);

    public:
        static std::queue<std::vector<uint8_t>> DataQueue;   // queue for unsent data
        static SOCKET TcpClient; // Main socket
        static SSL* SslClient;   // Main SSL stream
        static SSL_CTX* SslContext;
        static std::atomic<bool> IsConnected;  // Check socket status

        static bool InitializeClient(); //Connect & reconnect

        static void Reconnect();

        static bool Send(std::vector<uint8_t> msg);

        static void ReadServerData(); //Socket read/recevie

        static void SendQueue() // send all waiting messages
        {
            while (!DataQueue.empty()) {
                Send(DataQueue.front());
                DataQueue.pop();
            }
        }
    };

}

